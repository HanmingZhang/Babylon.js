var __extends=this&&this.__extends||(function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,r){e.__proto__=r}||function(e,r){for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])};return function(r,n){function i(){this.constructor=r}e(r,n),r.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}})(),__decorate=this&&this.__decorate||function(e,r,n,i){var t,o=arguments.length,a=o<3?r:null===i?i=Object.getOwnPropertyDescriptor(r,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,r,n,i);else for(var l=e.length-1;l>=0;l--)(t=e[l])&&(a=(o<3?t(a):o>3?t(r,n,a):t(r,n))||a);return o>3&&a&&Object.defineProperty(r,n,a),a},BABYLON;!(function(e){var r=(function(e){function r(){var r=e.call(this)||this;return r.DIFFUSE=!1,r.REFLECTION=!1,r.BUMP=!1,r.CLIPPLANE=!1,r.ALPHATEST=!1,r.DEPTHPREPASS=!1,r.ALPHAFROMDIFFUSE=!1,r.POINTSIZE=!1,r.FOG=!1,r.NORMAL=!1,r.UV1=!1,r.UV2=!1,r.VERTEXCOLOR=!1,r.VERTEXALPHA=!1,r.NUM_BONE_INFLUENCERS=0,r.BonesPerMesh=0,r.LOGARITHMICDEPTH=!1,r.rebuild(),r}return __extends(r,e),r})(e.MaterialDefines);e.RaindropsMaterialDefines=r;var n=(function(n){function i(r,i,t){void 0===t&&(t=new e.Vector2(512,512));var o=n.call(this,r,i)||this;return o.renderTargetSize=t,o.ambientColor=new e.Color3(0,0,0),o.diffuseColor=new e.Color3(1,1,1),o.specularColor=new e.Color3(1,1,1),o.specularPower=64,o._disableLighting=!1,o._maxSimultaneousLights=4,o._renderTargets=new e.SmartArray(16),o._globalAmbientColor=new e.Color3(0,0,0),o.raindropPuddleAmount=2,o.raindropSpeed=25,o.raindropSize=10,o.raindropRippleNormalIntensity=1,o._mesh=null,o._reflectionTransform=e.Matrix.Zero(),o._lastTime=0,o._lastDeltaTime=0,o._createRenderTargets(i,t),o.getRenderTargetTextures=function(){return o._renderTargets.reset(),o._renderTargets.push(o._reflectionRTT),o._renderTargets},o}return __extends(i,n),i.prototype.getClassName=function(){return"RaindropsMaterial"},Object.defineProperty(i.prototype,"useLogarithmicDepth",{get:function(){return this._useLogarithmicDepth},set:function(e){this._useLogarithmicDepth=e&&this.getScene().getEngine().getCaps().fragmentDepthSupported,this._markAllSubMeshesAsMiscDirty()},enumerable:!0,configurable:!0}),Object.defineProperty(i.prototype,"reflectionTexture",{get:function(){return this._reflectionRTT},enumerable:!0,configurable:!0}),i.prototype.addToRenderList=function(e){this._reflectionRTT.renderList&&this._reflectionRTT.renderList.push(e)},i.prototype.enableRenderTargets=function(e){var r=e?1:0;this._reflectionRTT.refreshRate=r},i.prototype.getRenderList=function(){return this._reflectionRTT.renderList},Object.defineProperty(i.prototype,"renderTargetsEnabled",{get:function(){return!(0===this._reflectionRTT.refreshRate)},enumerable:!0,configurable:!0}),i.prototype.needAlphaBlending=function(){return this.alpha<1},i.prototype.needAlphaTesting=function(){return null!=this._diffuseTexture&&this._diffuseTexture.hasAlpha},i.prototype.getAlphaTestTexture=function(){return this._diffuseTexture},i.prototype.isReadyForSubMesh=function(n,i,t){if(void 0===t&&(t=!1),this.isFrozen&&this._wasPreviouslyReady&&i.effect)return!0;i._materialDefines||(i._materialDefines=new r);var o=this.getScene(),a=i._materialDefines;if(!this.checkReadyOnEveryCall&&i.effect&&this._renderId===o.getRenderId())return!0;var l=o.getEngine();if(a._needNormals=e.MaterialHelper.PrepareDefinesForLights(o,n,a,!0,this._maxSimultaneousLights,this._disableLighting),a._areTexturesDirty)if(a._needUVs=!1,o.texturesEnabled){if(this._diffuseTexture&&e.StandardMaterial.DiffuseTextureEnabled){if(!this._diffuseTexture.isReadyOrNotBlocking())return!1;e.MaterialHelper.PrepareDefinesForMergedUV(this._diffuseTexture,a,"DIFFUSE"),a._needUVs=!0,a.DIFFUSE=!0}else a.DIFFUSE=!1;if(this._raindropTexture){if(!this._raindropTexture.isReadyOrNotBlocking())return!1;e.MaterialHelper.PrepareDefinesForMergedUV(this._raindropTexture,a,"RAINDROP"),a._needUVs=!0}if(this._raindropGroundHeightTexture){if(!this._raindropGroundHeightTexture.isReadyOrNotBlocking())return!1;e.MaterialHelper.PrepareDefinesForMergedUV(this._raindropGroundHeightTexture,a,"RAINDROPHEIGHT"),a._needUVs=!0}if(this._raindropGroundNormalTexture){if(!this._raindropGroundNormalTexture.isReadyOrNotBlocking())return!1;e.MaterialHelper.PrepareDefinesForMergedUV(this._raindropGroundNormalTexture,a,"RAINDROPNORMAL"),a._needUVs=!0}if(this._raindropWaterNormalTexture){if(!this._raindropWaterNormalTexture.isReadyOrNotBlocking())return!1;e.MaterialHelper.PrepareDefinesForMergedUV(this._raindropWaterNormalTexture,a,"RAINDROPWATER"),a._needUVs=!0}e.StandardMaterial.ReflectionTextureEnabled&&(a.REFLECTION=!0)}else a.DIFFUSE=!1,a.REFLECTION=!1;if(e.MaterialHelper.PrepareDefinesForMisc(n,o,this._useLogarithmicDepth,this.pointsCloud,this.fogEnabled,a),e.MaterialHelper.PrepareDefinesForAttributes(n,a,!0,!0),e.MaterialHelper.PrepareDefinesForFrameBoundValues(o,l,a,t),this._mesh=n,a.isDirty){a.markAsProcessed(),o.resetCachedMaterial();var s=new e.EffectFallbacks;a.FOG&&s.addFallback(1,"FOG"),a.POINTSIZE&&s.addFallback(0,"POINTSIZE"),a.LOGARITHMICDEPTH&&s.addFallback(0,"LOGARITHMICDEPTH"),e.MaterialHelper.HandleFallbacksForShadows(a,s,this._maxSimultaneousLights);var d=[e.VertexBuffer.PositionKind];a.NORMAL&&d.push(e.VertexBuffer.NormalKind),a.UV1&&d.push(e.VertexBuffer.UVKind),a.UV2&&d.push(e.VertexBuffer.UV2Kind),a.VERTEXCOLOR&&d.push(e.VertexBuffer.ColorKind),e.MaterialHelper.PrepareAttributesForBones(d,n,a,s),e.MaterialHelper.PrepareAttributesForInstances(d,a);var u=["world","view","viewProjection","vEyePosition","vLightsType","vAmbientColor","vDiffuseColor","vSpecularColor","vFogInfos","vFogColor","pointSize","vDiffuseInfos","mBones","vClipPlane","raindropMatrix","diffuseMatrix","groundHeightMatrix","groundNormalMatrix","waterNormalMatrix","logarithmicDepthConstant","worldReflectionViewProjection","raindropPuddleAmount","raindropSpeed","raindropSize","raindropRippleNormalIntensity","time"],f=["diffuseSampler","raindropSampler","reflectionSampler","groundHeightSampler","groundNormalSampler","waterNormalSampler"],p=new Array;e.MaterialHelper.PrepareUniformsAndSamplersList({uniformsNames:u,uniformBuffersNames:p,samplers:f,defines:a,maxSimultaneousLights:this._maxSimultaneousLights});var c=a.toString();i.setEffect(o.getEngine().createEffect("raindrops",{attributes:d,uniformsNames:u,uniformBuffersNames:p,samplers:f,defines:c,fallbacks:s,onCompiled:this.onCompiled,onError:this.onError,indexParameters:{maxSimultaneousLights:this._maxSimultaneousLights}},l),a)}return!(!i.effect||!i.effect.isReady())&&(this._renderId=o.getRenderId(),this._wasPreviouslyReady=!0,!0)},i.prototype.bindForSubMesh=function(r,n,i){var t=this.getScene(),o=i._materialDefines;if(o){var a=i.effect;if(a&&this._mesh){this._activeEffect=a,this.bindOnlyWorldMatrix(r),this._activeEffect.setMatrix("viewProjection",t.getTransformMatrix());var l=this._mustRebind(t,a);e.MaterialHelper.BindBonesParameters(n,this._activeEffect),l&&(this.diffuseTexture&&e.StandardMaterial.DiffuseTextureEnabled&&(a.setTexture("diffuseSampler",this.diffuseTexture),a.setFloat2("vDiffuseInfos",this.diffuseTexture.coordinatesIndex,this.diffuseTexture.level),a.setMatrix("diffuseMatrix",this.diffuseTexture.getTextureMatrix())),this.raindropTexture&&(a.setTexture("raindropSampler",this.raindropTexture),a.setMatrix("raindropMatrix",this.raindropTexture.getTextureMatrix())),this.raindropGroundHeightTexture&&(a.setTexture("groundHeightSampler",this.raindropGroundHeightTexture),a.setMatrix("groundHeightMatrix",this.raindropGroundHeightTexture.getTextureMatrix())),this.raindropGroundNormalTexture&&(a.setTexture("groundNormalSampler",this.raindropGroundNormalTexture),a.setMatrix("groundNormalMatrix",this.raindropGroundNormalTexture.getTextureMatrix())),this.raindropWaterNormalTexture&&(a.setTexture("waterNormalSampler",this.raindropWaterNormalTexture),a.setMatrix("waterNormalMatrix",this.raindropWaterNormalTexture.getTextureMatrix())),e.MaterialHelper.BindClipPlane(a,t),this.pointsCloud&&a.setFloat("pointSize",this.pointSize),t.ambientColor.multiplyToRef(this.ambientColor,this._globalAmbientColor),e.MaterialHelper.BindEyePosition(a,t),a.setColor3("vAmbientColor",this._globalAmbientColor),a.setColor4("vDiffuseColor",this.diffuseColor,this.alpha*n.visibility),a.setColor4("vSpecularColor",this.specularColor,this.specularPower)),!l&&this.isFrozen||(t.lightsEnabled&&!this._disableLighting&&e.MaterialHelper.BindLights(t,n,a,o,this._maxSimultaneousLights),t.fogEnabled&&n.applyFog&&t.fogMode!==e.Scene.FOGMODE_NONE&&a.setMatrix("view",t.getViewMatrix()),e.MaterialHelper.BindFogParameters(t,n,a),e.MaterialHelper.BindLogDepth(o,a,t)),e.StandardMaterial.ReflectionTextureEnabled&&a.setTexture("reflectionSampler",this._reflectionRTT);var s=this._mesh.getWorldMatrix().multiply(this._reflectionTransform).multiply(t.getProjectionMatrix()),d=t.getEngine().getDeltaTime();d!==this._lastDeltaTime&&(this._lastDeltaTime=d,this._lastTime+=this._lastDeltaTime),a.setMatrix("worldReflectionViewProjection",s),a.setFloat("time",this._lastTime/1e5),a.setFloat("raindropPuddleAmount",this.raindropPuddleAmount),a.setFloat("raindropSpeed",this.raindropSpeed),a.setFloat("raindropSize",this.raindropSize),a.setFloat("raindropRippleNormalIntensity",this.raindropRippleNormalIntensity),this._afterBind(n,this._activeEffect)}}},i.prototype._createRenderTargets=function(r,n){var i=this;this._reflectionRTT=new e.RenderTargetTexture(name+"_reflection",{width:n.x,height:n.y},r,!1,!0),this._reflectionRTT.wrapU=e.Texture.MIRROR_ADDRESSMODE,this._reflectionRTT.wrapV=e.Texture.MIRROR_ADDRESSMODE,this._reflectionRTT.ignoreCameraViewport=!0;var t,o,a=null,l=e.Matrix.Zero();this._reflectionRTT.onBeforeRender=function(){i._mesh&&(t=i._mesh.isVisible,i._mesh.isVisible=!1),a=r.clipPlane;var n=i._mesh?i._mesh.position.y:0;r.clipPlane=e.Plane.FromPositionAndNormal(new e.Vector3(0,n-.05,0),new e.Vector3(0,-1,0)),e.Matrix.ReflectionToRef(r.clipPlane,l),o=r.getViewMatrix(),l.multiplyToRef(o,i._reflectionTransform),r.setTransformMatrix(i._reflectionTransform,r.getProjectionMatrix()),r.getEngine().cullBackFaces=!1,r._mirroredCameraPosition=e.Vector3.TransformCoordinates(r.activeCamera.position,l)},this._reflectionRTT.onAfterRender=function(){i._mesh&&(i._mesh.isVisible=t),r.clipPlane=a,r.setTransformMatrix(o,r.getProjectionMatrix()),r.getEngine().cullBackFaces=!0,r._mirroredCameraPosition=null}},i.prototype.getAnimatables=function(){var e=[];return this._diffuseTexture&&this._diffuseTexture.animations&&this._diffuseTexture.animations.length>0&&e.push(this._diffuseTexture),this._raindropTexture&&this._raindropTexture.animations&&this._raindropTexture.animations.length>0&&e.push(this._raindropTexture),this._raindropGroundHeightTexture&&this._raindropGroundHeightTexture.animations&&this._raindropGroundHeightTexture.animations.length>0&&e.push(this._raindropGroundHeightTexture),this._raindropGroundNormalTexture&&this._raindropGroundNormalTexture.animations&&this._raindropGroundNormalTexture.animations.length>0&&e.push(this._raindropGroundNormalTexture),this._raindropWaterNormalTexture&&this._raindropWaterNormalTexture.animations&&this._raindropWaterNormalTexture.animations.length>0&&e.push(this._raindropWaterNormalTexture),this._reflectionRTT&&this._reflectionRTT.animations&&this._reflectionRTT.animations.length>0&&e.push(this._reflectionRTT),e},i.prototype.getActiveTextures=function(){var e=n.prototype.getActiveTextures.call(this);return this._diffuseTexture&&e.push(this._diffuseTexture),this._raindropTexture&&e.push(this._raindropTexture),this._raindropGroundHeightTexture&&e.push(this._raindropGroundHeightTexture),this._raindropGroundNormalTexture&&e.push(this._raindropGroundNormalTexture),this._raindropWaterNormalTexture&&e.push(this._raindropWaterNormalTexture),e},i.prototype.hasTexture=function(e){return!!n.prototype.hasTexture.call(this,e)||(this._diffuseTexture===e||(this._raindropTexture===e||(this._raindropGroundHeightTexture===e||(this._raindropGroundNormalTexture===e||this._raindropWaterNormalTexture===e))))},i.prototype.dispose=function(e){this._diffuseTexture&&this._diffuseTexture.dispose(),this._raindropTexture&&this._raindropTexture.dispose(),this._raindropGroundHeightTexture&&this._raindropGroundHeightTexture.dispose(),this._raindropGroundNormalTexture&&this._raindropGroundNormalTexture.dispose(),this._raindropWaterNormalTexture&&this._raindropWaterNormalTexture.dispose();var r=this.getScene().customRenderTargets.indexOf(this._reflectionRTT);-1!=r&&this.getScene().customRenderTargets.splice(r,1),this._reflectionRTT&&this._reflectionRTT.dispose(),n.prototype.dispose.call(this,e)},i.prototype.clone=function(r){var n=this;return e.SerializationHelper.Clone((function(){return new i(r,n.getScene())}),this)},i.prototype.serialize=function(){var r=e.SerializationHelper.Serialize(this);return r.customType="BABYLON.RaindropMaterial",r.reflectionTexture.isRenderTarget=!0,r},i.Parse=function(r,n,t){return e.SerializationHelper.Parse((function(){return new i(r.name,n)}),r,n,t)},__decorate([e.serializeAsTexture("diffuseTexture")],i.prototype,"_diffuseTexture",void 0),__decorate([e.expandToProperty("_markAllSubMeshesAsTexturesDirty")],i.prototype,"diffuseTexture",void 0),__decorate([e.serializeAsTexture("raindropTexture")],i.prototype,"_raindropTexture",void 0),__decorate([e.expandToProperty("_markAllSubMeshesAsTexturesDirty")],i.prototype,"raindropTexture",void 0),__decorate([e.serializeAsTexture("raindropGoundHeightTexture")],i.prototype,"_raindropGroundHeightTexture",void 0),__decorate([e.expandToProperty("_markAllSubMeshesAsTexturesDirty")],i.prototype,"raindropGroundHeightTexture",void 0),__decorate([e.serializeAsTexture("raindropGoundNormalTexture")],i.prototype,"_raindropGroundNormalTexture",void 0),__decorate([e.expandToProperty("_markAllSubMeshesAsTexturesDirty")],i.prototype,"raindropGroundNormalTexture",void 0),__decorate([e.serializeAsTexture("raindropWaterNormalTexture")],i.prototype,"_raindropWaterNormalTexture",void 0),__decorate([e.expandToProperty("_markAllSubMeshesAsTexturesDirty")],i.prototype,"raindropWaterNormalTexture",void 0),__decorate([e.serializeAsColor3("ambient")],i.prototype,"ambientColor",void 0),__decorate([e.serializeAsColor3("diffuse")],i.prototype,"diffuseColor",void 0),__decorate([e.serializeAsColor3("specular")],i.prototype,"specularColor",void 0),__decorate([e.serialize()],i.prototype,"specularPower",void 0),__decorate([e.serialize("disableLighting")],i.prototype,"_disableLighting",void 0),__decorate([e.expandToProperty("_markAllSubMeshesAsLightsDirty")],i.prototype,"disableLighting",void 0),__decorate([e.serialize("maxSimultaneousLights")],i.prototype,"_maxSimultaneousLights",void 0),__decorate([e.expandToProperty("_markAllSubMeshesAsLightsDirty")],i.prototype,"maxSimultaneousLights",void 0),__decorate([e.serialize()],i.prototype,"useLogarithmicDepth",null),i})(e.PushMaterial);e.RaindropsMaterial=n})(BABYLON||(BABYLON={})),BABYLON.Effect.ShadersStore.raindropsVertexShader="precision highp float;\n\nattribute vec3 position;\n#ifdef NORMAL\nattribute vec3 normal;\n#endif\n#ifdef UV1\nattribute vec2 uv;\n#endif\n#ifdef UV2\nattribute vec2 uv2;\n#endif\n#ifdef VERTEXCOLOR\nattribute vec4 color;\n#endif\nuniform mat4 worldReflectionViewProjection;\nuniform mat4 view;\nuniform mat4 viewProjection;\n#include<helperFunctions>\n#include<bonesDeclaration>\n\n#include<instancesDeclaration>\n\n\n\n\n\n\n#if defined(DIFFUSE)\nvarying vec2 vDiffuseUV;\n#endif\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#if defined(BUMP)\nvarying vec2 vBumpUV;\n#endif\n#ifdef POINTSIZE\nuniform float pointSize;\n#endif\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n#include<bumpVertexDeclaration>\n#include<clipPlaneVertexDeclaration>\n#include<fogVertexDeclaration>\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n\n\n\n\n\n\n\n\nuniform float time;\nuniform mat4 raindropMatrix;\nvarying vec2 vRaindropUV;\nuniform mat4 groundHeightMatrix;\nvarying vec2 vRaindropGroundHeightUV;\nuniform mat4 groundNormalMatrix;\nvarying vec2 vRaindropGroundNormalUV;\nuniform mat4 waterNormalMatrix;\nvarying vec2 vRaindropWaterNormalUV;\n#ifdef DIFFUSE\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n#ifdef REFLECTION\n\nvarying vec3 vPosition;\nvarying vec3 vReflectionMapTexCoord;\n#endif\n#include<logDepthDeclaration>\nvoid main(void) {\n\n\n\n\n\n\n\n\n\n\n\n#include<instancesVertex>\n#include<bonesVertex>\ngl_Position=viewProjection*finalWorld*vec4(position,1.0);\nvec4 worldPos=finalWorld*vec4(position,1.0);\nvPositionW=vec3(worldPos);\n#ifdef NORMAL\nvNormalW=normalize(vec3(finalWorld*vec4(normal,0.0)));\n#endif\n\n\n\n\n#ifndef UV1\nvec2 uv=vec2(0.,0.);\n#endif\n#ifndef UV2\nvec2 uv2=vec2(0.,0.);\n#endif\n\n\n\n\n\n\n#if defined(DIFFUSE)\nif (vDiffuseInfos.x == 0.)\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvDiffuseUV=vec2(diffuseMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\n#if defined(BUMP)\nif (vBumpInfos.x == 0.)\n{\nvBumpUV=vec2(bumpMatrix*vec4(uv,1.0,0.0));\n}\nelse\n{\nvBumpUV=vec2(bumpMatrix*vec4(uv2,1.0,0.0));\n}\n#endif\nvRaindropUV=vec2(raindropMatrix*vec4(uv,1.0,0.0));\nvRaindropGroundHeightUV=vec2(groundHeightMatrix*vec4(uv,1.0,0.0));\nvRaindropGroundNormalUV=vec2(groundNormalMatrix*vec4(uv,1.0,0.0));\nfloat raindropWaterNormalUVScale=12.0;\nvRaindropWaterNormalUV=vec2(waterNormalMatrix*vec4((uv*raindropWaterNormalUVScale)+time*vec2(10.0,10.0),1.0,0.0));\n#include<bumpVertex>\n#include<clipPlaneVertex>\n#include<fogVertex>\n#include<shadowsVertex>[0..maxSimultaneousLights]\n#ifdef VERTEXCOLOR\n\nvColor=color;\n#endif\n#include<pointCloudVertex>\n\n#ifdef POINTSIZE\ngl_PointSize=pointSize;\n#endif\n#ifdef REFLECTION\n\nvPosition=position;\nworldPos=worldReflectionViewProjection*vec4(position,1.0);\nvReflectionMapTexCoord.x=0.5*(worldPos.w+worldPos.x);\nvReflectionMapTexCoord.y=0.5*(worldPos.w+worldPos.y);\nvReflectionMapTexCoord.z=worldPos.w;\n#endif\n#include<logDepthVertex>\n}",BABYLON.Effect.ShadersStore.raindropsPixelShader="#ifdef LOGARITHMICDEPTH\n#extension GL_EXT_frag_depth : enable\n#endif\nprecision highp float;\nuniform vec3 vEyePosition;\nuniform vec3 vAmbientColor;\nuniform vec4 vDiffuseColor;\nuniform vec4 vSpecularColor;\n\nvarying vec3 vPositionW;\n#ifdef NORMAL\nvarying vec3 vNormalW;\n#endif\n#ifdef VERTEXCOLOR\nvarying vec4 vColor;\n#endif\n\n#include<helperFunctions>\n\n#include<__decl__lightFragment>[0..maxSimultaneousLights]\n#include<lightsFragmentFunctions>\n#include<shadowsFragmentFunctions>\n\n#ifdef DIFFUSE\nvarying vec2 vDiffuseUV;\nuniform sampler2D diffuseSampler;\nuniform mat4 diffuseMatrix;\nuniform vec2 vDiffuseInfos;\n#endif\n\n#ifdef REFLECTION\nuniform sampler2D reflectionSampler;\nvarying vec3 vReflectionMapTexCoord;\nvarying vec3 vPosition;\n#endif\n#include<bumpFragmentFunctions>\n#include<clipPlaneFragmentDeclaration>\n#include<logDepthDeclaration>\n#include<fogFragmentDeclaration>\nuniform sampler2D raindropSampler;\nvarying vec2 vRaindropUV;\nuniform sampler2D groundHeightSampler;\nvarying vec2 vRaindropGroundHeightUV;\nuniform sampler2D groundNormalSampler;\nvarying vec2 vRaindropGroundNormalUV;\nuniform sampler2D waterNormalSampler;\nvarying vec2 vRaindropWaterNormalUV;\nuniform float time;\nuniform float raindropPuddleAmount;\nuniform float raindropSpeed;\nuniform float raindropSize;\nuniform float raindropRippleNormalIntensity;\n\nvec4 flipBookEffect(float inputAnimationPhase,float rows,float columns,vec2 uv){\nfloat fractPart=fract(inputAnimationPhase);\nvec2 fractPartVec2=vec2(fractPart,fractPart);\nvec2 tmpVec2=vec2(columns,rows);\nvec2 tmp2Vec2=vec2(columns*rows,rows);\nvec2 fractResultVec2=tmp2Vec2*fractPartVec2;\nfractResultVec2=floor(fractResultVec2);\n\nvec2 resultUV=(uv/tmpVec2)+(fractResultVec2/tmpVec2);\n\nresultUV.y=1.0-resultUV.y;\nreturn texture2D(raindropSampler,resultUV);\n}\n\n\n\n\n\n\n\n\nvoid main(void) {\n#include<clipPlaneFragment>\nvec3 viewDirectionW=normalize(vEyePosition-vPositionW);\n\nvec4 baseColor=vec4(1.,1.,1.,1.);\nvec3 diffuseColor=vDiffuseColor.rgb;\n\nfloat alpha=vDiffuseColor.a;\n\n\n\nfloat raindropsTimeScale=raindropSpeed;\n\n\nfloat raindropsUVScale=12.0-min(max(2.0,raindropSize),10.0);\nvec2 inputUV=vec2(1.0-vRaindropUV.x,vRaindropUV.y);\n\n\nvec4 raindropsNormal=flipBookEffect(raindropsTimeScale*time,8.0,8.0,fract(raindropsUVScale*inputUV));\nraindropsNormal.x*=5.0;\nraindropsNormal.y*=5.0;\n\n\n\n\nbaseColor=raindropsNormal;\n\n\nfloat puddleNoiseScale=0.02;\n\nfloat noiseValue=texture2D(groundHeightSampler,puddleNoiseScale*(vRaindropGroundHeightUV)).r;\n\n\n\nfloat puddleAmount=raindropPuddleAmount;\nfloat noiseResult=pow(noiseValue*puddleAmount,20.0);\n\nnoiseResult=noiseResult*texture2D(groundHeightSampler,(vRaindropGroundHeightUV)).r;\nnoiseResult=clamp(noiseResult,0.0,1.0);\n\nvec3 groundNormalCol=texture2D(groundNormalSampler,vRaindropGroundNormalUV).rgb;\nvec3 normalW=normalize(vNormalW);\n\nnormalW.r=mix(normalW.r,groundNormalCol.r,noiseResult);\nnormalW.g=mix(normalW.g,groundNormalCol.g,noiseResult);\nnormalW.b=mix(normalW.b,groundNormalCol.b,noiseResult);\n\nnormalW=normalize(normalW);\n\nvec3 waterNormalCol=texture2D(waterNormalSampler,vRaindropWaterNormalUV).rgb;\nwaterNormalCol=normalize(waterNormalCol);\nnormalW=normalW+waterNormalCol;\nnormalW=normalize(normalW);\n\n\n\n\nfloat raindropsNormalIntensity=raindropRippleNormalIntensity;\nnormalW=normalW+raindropsNormalIntensity*normalize(raindropsNormal.rgb);\n\nnormalW=normalize(normalW);\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\nfloat bumpHeight=1.2;\n#ifdef NORMAL\n\nvec2 perturbation=bumpHeight*(normalW.rg-0.5);\n\n#else\nvec2 perturbation=bumpHeight*(vec2(1.0,1.0)-0.5);\nnormalW=normalize(-cross(dFdx(vPositionW),dFdy(vPositionW)));\n#endif\n#include<bumpFragment>\n\n\n#ifdef DIFFUSE\n\nbaseColor=texture2D(diffuseSampler,vDiffuseUV);\n#ifdef ALPHATEST\nif (baseColor.a<0.4)\ndiscard;\n#endif\n#ifdef ALPHAFROMDIFFUSE\nalpha*=baseColor.a;\n#endif\nbaseColor.rgb*=vDiffuseInfos.y;\n#endif\n\nvec3 refractionColor=vec3(0.,0.,0.);\n\n\n\nvec3 reflectionColor=vec3(0.,0.,0.);\n#ifdef REFLECTION\nfloat colorBlendFactor=0.8;\n\nvec3 eyeVector=normalize(vEyePosition-vPosition);\nvec4 waterColor=vec4(0.28,0.28,0.28,1.0);\nvec4 refractiveColor=vec4(0.0,0.0,0.0,1.0);\n\n\nvec2 projectedReflectionTexCoords=clamp(vReflectionMapTexCoord.xy/vReflectionMapTexCoord.z+perturbation,0.0,1.0);\nvec4 reflectiveColor=texture2D(reflectionSampler,projectedReflectionTexCoords);\n\n\n\n\n\n#endif\n#include<depthPrePass>\n#ifdef VERTEXCOLOR\nbaseColor.rgb*=vColor.rgb;\n#endif\n\n#ifdef SPECULARTERM\nfloat glossiness=vSpecularColor.a;\nvec3 specularColor=vSpecularColor.rgb;\n#ifdef SPECULAR\nvec4 specularMapColor=texture2D(specularSampler,vSpecularUV+uvOffset);\nspecularColor=specularMapColor.rgb;\n#ifdef GLOSSINESS\nglossiness=glossiness*specularMapColor.a;\n#endif\n#endif\n#else\nfloat glossiness=0.;\n#endif\n\nvec3 diffuseBase=vec3(0.,0.,0.);\nlightingInfo info;\n#ifdef SPECULARTERM\nvec3 specularBase=vec3(0.,0.,0.);\n#endif\nfloat shadow=1.;\n#include<lightFragment>[0..maxSimultaneousLights]\n#ifdef VERTEXALPHA\nalpha*=vColor.a;\n#endif\n\nvec3 finalDiffuse=clamp(diffuseBase*diffuseColor+vAmbientColor,0.0,1.0)*baseColor.rgb;\n\n#ifdef SPECULARTERM\nvec3 finalSpecular=specularBase*specularColor;\n#ifdef SPECULAROVERALPHA\nalpha=clamp(alpha+dot(finalSpecular,vec3(0.3,0.59,0.11)),0.,1.);\n#endif\n#else\nvec3 finalSpecular=vec3(0.0);\n#endif\n\n\nvec4 color=vec4(finalDiffuse+finalSpecular+(1.0-noiseResult)*colorBlendFactor*waterColor.rgb*reflectiveColor.rgb,alpha);\n\n#include<logDepthFragment>\n#include<fogFragment>\ngl_FragColor=color;\n\n\n}";