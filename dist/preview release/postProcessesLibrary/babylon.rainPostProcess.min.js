var __extends=this&&this.__extends||(function(){var n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)t.hasOwnProperty(e)&&(n[e]=t[e])};return function(t,e){function o(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}})(),BABYLON;!(function(n){var t=(function(n){function t(t,e,o,r,i,a){var s=n.call(this,t,"rain",["time","width","height"],null,e,o,r,i,a)||this;s.degree=1,s._lastTime=0,s._lastDeltaTime=0;var f=o.getScene().getEngine().getDeltaTime();f!==s._lastDeltaTime&&(s._lastDeltaTime=f,s._lastTime+=s._lastDeltaTime);var l=0,c=0;return s.onApplyObservable.add((function(n){n.setFloat("width",o.getEngine().getRenderWidth()),n.setFloat("height",o.getEngine().getRenderHeight()),l+=.003,c=l,n.setFloat("time",10*c)})),s}return __extends(t,n),t})(n.PostProcess);n.rainPostProcess=t})(BABYLON||(BABYLON={})),BABYLON.Effect.ShadersStore.rainPixelShader="\nvarying vec2 vUV;\nuniform sampler2D textureSampler;\nuniform float width;\nuniform float height;\nuniform float time;\n\n\n#define HASHSCALE1 443.8975\n#define HASHSCALE3 vec3(443.897,441.423,437.195)\n\nvec3 N31(float p) {\n\nvec3 p3=fract(vec3(p)*vec3(.1031,.11369,.13787));\np3+=dot(p3,p3.yzx+19.19);\nreturn fract(vec3((p3.x+p3.y)*p3.z,(p3.x+p3.z)*p3.y,(p3.y+p3.z)*p3.x));\n}\nvec3 hash31(float p)\n{\nvec3 p3=fract(vec3(p)*HASHSCALE3);\np3+=dot(p3,p3.yzx+19.19);\nreturn fract((p3.xxy+p3.yzz)*p3.zyx); \n}\nfloat SawTooth(float t) {\nreturn cos(t+cos(t))+sin(2.*t)*.2+sin(4.*t)*.02;\n}\nvec2 GetDrops(vec2 uv,float seed) {\nfloat t=time;\nuv.y+=t*0.05; \nuv*=vec2(40.,5.);\nvec2 id=floor(uv); \nvec3 n=N31(id.x+(id.y+seed)*546.3524); \nvec2 bd=fract(uv); \nbd-=.5; \n\nbd.y*=4.;\nbd.x+=(n.x-.5)*.6; \nt+=n.z*6.; \nfloat slide=SawTooth(t);\nbd.y+=slide*2.; \n\nfloat d=length(bd); \nvec2 normalbd=normalize(bd);\nfloat temp=-0.10*normalbd.y+0.20;\n\nfloat mainDrop=smoothstep(temp,.1,d);\nreturn bd*mainDrop;\n}\nvoid main(void)\n{\nvec2 uv=vUV;\nvec2 offs=vec2(0.);\noffs=GetDrops(uv*0.5,1.);\n\noffs+=GetDrops(uv*2.,25.);\nconst vec2 lensRadius=vec2(1.5,0.05);\nfloat dist=distance(uv.xy,vec2(0.5,0.5));\nfloat vigfin=pow(1.-smoothstep(lensRadius.x,lensRadius.y,dist),2.);\noffs*=vigfin*10.0;\nuv-=offs;\ngl_FragColor=texture2D(textureSampler,uv-offs);\n\n}\n";